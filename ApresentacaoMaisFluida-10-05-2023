Boa noite meus consagrados, venho compartilhar mais conhecimento do mundo da programação para vocês! Rsrs viva o open source e a comunidade GNU, sem dúvidas quem é de tecnologia DEVE conhecer pois nos ajuda muito a desenvolver e a configurar o ambiente sem grandes problemas. 
Deixando as ressalvas de lado hoje venho compartilhar meu trabalho de conclusão do primeiro semestre da disciplina de "Programação para computadores" com a linguagem pai C.
Optei por desenvolver uma solução ao envolto de gerações e leituras de QRCodes pois achei um tema bem diferenciado e atiçou meu lado criativo e curioso pois eu já gosto bastante de criptografia (pretendo estudar sobre blockchain no futuro) e então fui na caçada da solução!
QR Codes são imagens 2D de matrizes binárias,
formadas por pontos brancos e pretos que representam a informação, não apenas de URL's como qualquer texto ou objetos.
A lógica inicial é sempre quebrar o problemão em pequenos problemas, e ir ticando cada um deles, ou seja, a primeira coisa é ir atrás de uma biblioteca especializada para trabalhar com gerações de QRCode na linguagem C.
Aí morava o problema, devemos sim valorizar a linguagem pois ela é a base de outras mas a verdade é que não possuem muitas documentações ou problemas resolvidos com ela em português Brasil, os problemas que ela se propõe é mais para otimizações com ganhos de performance, como desenvolver drivers, sistemas operacionais ou sistemas que iram rodar em hardwares simples como controladores e etc pois esse é o propósito do C.
Não foi a melhor escolha de linguagem para resolução do nosso problema mas como é regra ter que utilizar ela, não desisti fácil e fui atrás!
Após algum esforço encontrei uma biblioteca especializada em trabalhar com QRCode, porém o C não ajuda muito por não possuir gerenciador de dependências na sua instalação padrão, então novamente temos que perder tempo configurando ambiente, pois foi grande parte isso.
Existe um gerenciador de dependências muito conhecido no mundo C sendo ele o "Conan", porém como um grande entusiata GNU que eu sou descobri que essa biblioteca está no repósito padrão do Ubuntu e muitos outros sistemas unix like, pois grande parte dos programas são escritos em C, ou seja, temos grande parte das dependências da linguagem no repositório padrão pois grande parte da biblioteca Linux é escrita em C então podemos simplesmente instalar ela via apt pelo terminal.

$ sudo apt-get install libqrencode

Pronto, agora basta realizar os includes e utilizar as funcionalidades prontas para resolver nosso problema, NÃO CALMA ainda pode melhorar, se existe biblioteca existe algum programa pronto especializado nesse problema, e melhor ainda DISPONÍVEL NO REPOSITÓRIO, então basta instalarmos e gerarmos o QRCode tudo via terminal.

$ sudo apt install qrencode

Antes de resolver o problema assim eu ainda quis desenvolver na unha utilizando a biblioteca e até foi possível gerar, mas sempre é melhor delegar as responsabilidades para quem é especialista e assim evitamos perder tempo com problemas já resolvidos, esse é o ideial GNU Linux que eu mais gosto por isso todos que desenvolvem deve dar uma chance e discartar a janela quebrada rsrs...

Hello Word da biblioteca qrencode:

  #include <stdio.h> 
  #include <stdlib.h> 
  #include <qrencode.h> 

  
  int main() 
  { 
    // Define a mensagem a ser codificada no QR code 
    char* message = "Hello, World!"; 

    // Cria um objeto QRcode a partir da mensagem 
    QRcode* qrcode = QRcode_encodeString(message, 0, QR_ECLEVEL_M, QR_MODE_8, 1); 

    // Imprime a matriz de pontos do QR code 
    int i, j; 
    for (i = 0; i < qrcode->width; i++) { 
      for (j = 0; j < qrcode->width; j++) { 
        printf("%c ", qrcode->data[i*qrcode->width+j]?'#':' '); 
      } 
      printf("\n"); 
    } 

     // Libera a memória alocada pelo QRcode 
     QRcode_free(qrcode); 
      
     return 0; 
  }

Com esse código já é possível gerar um QRCode partir de uma string e a saída é impressa no console.

Não satisfeito eu fui além e resolvi converter a matriz 2d gerada (QR Code) e gerar o output como PNG (Imagem), e para isso basta evitar recriar a roda novamente e instalar uma biblioteca especializada para trabalhar com PNG.

$ sudo apt-install libpng

O código é bem simples, o mesmo que o anterior porém ao invés de imprimir a matriz no console, utilizamos as chamadas na biblioteca PNG e ela resolve para nós:

 #include <stdio.h> 
 #include <stdlib.h> 
 #include <qrencode.h> 
 #include <png.h> 
  
 void write_png_file(char* filename, int width, int height, unsigned char* image_data) { 
     FILE *fp; 
     png_structp png_ptr = NULL; 
     png_infop info_ptr = NULL; 
     png_bytep row = NULL; 
  
     fp = fopen(filename, "wb"); 
     if (!fp) { 
         printf("Error opening file %s for writing.\n", filename); 
         return; 
     } 
  
     // Initialize PNG write structure 
     png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL); 
     if (png_ptr == NULL) { 
         printf("Error initializing PNG write structure.\n"); 
         fclose(fp); 
         return; 
     } 
  
     // Initialize PNG info structure 
     info_ptr = png_create_info_struct(png_ptr); 
     if (info_ptr == NULL) { 
         printf("Error initializing PNG info structure.\n"); 
         png_destroy_write_struct(&png_ptr, (png_infopp)NULL); 
         fclose(fp); 
         return; 
     } 
  
     // Set error handling 
     if (setjmp(png_jmpbuf(png_ptr))) { 
         printf("Error during PNG write.\n"); 
         png_destroy_write_struct(&png_ptr, &info_ptr); 
         fclose(fp); 
         return; 
     } 
  
     // Set PNG write options 
     png_set_IHDR(png_ptr, info_ptr, width, height, 
                  8, PNG_COLOR_TYPE_GRAY, PNG_INTERLACE_NONE, 
                  PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT); 
  
     // Write header information 
     png_init_io(png_ptr, fp); 
     png_write_info(png_ptr, info_ptr); 
  
     // Write image data 
     int i; 
     for (i = 0; i < height; i++) { 
         row = image_data + i * width; 
         png_write_row(png_ptr, row); 
     } 
  
     // Finalize write 
     png_write_end(png_ptr, NULL); 
  
     // Clean up 
     png_destroy_write_struct(&png_ptr, &info_ptr); 
     fclose(fp); 
 } 
  
  
 int main() { 
     // Define a mensagem a ser codificada no QR code 
     char* message = "hello word!"; 
  
     QRcode* qrcode = QRcode_encodeString(message, 0, QR_ECLEVEL_M, QR_MODE_8, 1); 
  
     // Allocate buffer for image data 
     unsigned char* image_data = (unsigned char*)malloc(qrcode->width * qrcode->width * sizeof(unsigned char)); 
  
     // Convert QRcode data to grayscale image data 
     int i, j; 
     for (i = 0; i < qrcode->width; i++) { 
         for (j = 0; j < qrcode->width; j++) { 
             image_data[i*qrcode->width+j] = qrcode->data[i*qrcode->width+j] ? 0 : 255; 
         } 
     } 
  
     // Write image data to file 
     write_png_file("hello.png", qrcode->width, qrcode->width, image_data); 
  
     // Clean up 
     QRcode_free(qrcode); 
     free(image_data); 
  
     return 0; 
 }

Mas como dito, o código é bem simples de poucas linhas sem nenhum tratamento de erros e sem pensar em sobrecargas de chamadas então para isso no código final optei por utilizar a execução do comando bash na própria API REST com uso do system() para execução de programas no segundo plano em tempo de execução (runtime) que é o próximo tópico.

Explorando e utilizando as gerações de QRCode pelo terminal Bash:

Os parâmetros são bem simples e intuitivo.

$ sudo apt install qrencode 

$ qrencode "https://welbert-dev.github.io/firstPortifolioGithubPages-2022/#/certificates" -t UTF8 

$ qrencode "https://www.instagram.com/lunatic_bertelli/" -t ANSIUTF8 

$ qrencode "https://www.linkedin.com/in/wellison-bertelli-2191ba204" -t ASCII 

invertendo: $ qrencode "https://www.linkedin.com/in/wellison-bertelli-2191ba204" -t UTF8i 

$ qrencode "https://welbert-dev.github.io/firstPortifolioGithubPages-2022/#/certificates" -t png -o ~/Documentos/github/QRCodeReader_SummarizingInvoiceNotes/generatedQRCodeWithLibqrencode/teste.png 

$ feh ~/Documentos/github/QRCodeReader_SummarizingInvoiceNotes/generatedQRCodeWithLibqrencode/teste.png

Após conseguir gerar o QRCode, precisamos testar para ver se estão funcionando então por que não utilizar as tecnologias web (reactJs) como camada de apresentação e scanear o código QR pelo browser (navegador) rsrs?

Sempre buscando soluções prontas para nossos problemas em primeiro lugar, e como a comunidade React é bem grande e engajada foi bem fácil encontrar uma biblioteca javascript especializadas em ler QR Code:

$ npm i react-qr-reader

Utilizando alguns pequenos comandos podemos instalar e integrar essa biblioteca em nosso programa:

Código {...}

Pronto, já temos o gerador e o leitor de códigos QR más ainda falta o ajuste fino e perfumaria (CSS) e as ressalvas são:

Ler o código e armazenar em uma lista sem duplicar.

Basta um javascript Vanilla e local storages para nos salvar:

Código {...}

Pronto, já temos a base para nosso frontend pronta então o próximo passo é integrar o frontend com o backend por meio de uma API Rest para finalmente gerar e ler códigos tudo pelo mesmo ambiente.

Desenvolver API's REST em C é quase impossível pois literalmente não existe material na web e os poucos são em inglês, mas nada que um pequeno esforço e inglês de manual básico para nos ajudar com umas pesquisas descobri o mongoose.ws que é uma biblioteca quase um framework para desenvolvimento e mensageria HTTP, más com enfoque novamente em microcontroladores (hardwares simples estilo raspbarry) devido a grande performance da linguagem C.

Mas para minha infelicidade ela não está no repositório padrão do Ubuntu, então não é possível instalar via terminal pelo apt ;-;

Deixando a tristeza de lado e partindo para cima do problema, podemos instalar a biblioteca mongoose clonando o repositório e utilizando ela:

$ sudo git clone..

Códigos {...}

Pronto agora é só implementar a lógica do método POST que recebe a mensagem a ser encriptada pelo json do body, utilizar a execução em segundo plano do comando bash e retornar a imagem do QR gerado na response http, e renderizar ela na tela:

Códigos {...}
